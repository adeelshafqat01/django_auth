# Generated by Django 4.2 on 2023-05-03 14:00

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("address", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ServiceTypes",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("climate_control", models.BooleanField(default=False)),
                ("inside_service", models.BooleanField(default=False)),
                ("outside_service", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="ServiceProvider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "buisness_type",
                    models.CharField(
                        choices=[
                            ("MOVERS", "movers"),
                            ("STORAGE_UNIT", "storage_unit"),
                            ("ORGANIZERS", "organizers"),
                        ],
                        max_length=255,
                    ),
                ),
                ("facility_name", models.CharField(max_length=255)),
                ("area_code", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("fax_number", models.CharField(blank=True, max_length=50, null=True)),
                ("email", models.EmailField(max_length=254)),
                ("website", models.URLField(blank=True, null=True)),
                ("facebook", models.URLField(blank=True, null=True)),
                ("instagram", models.URLField(blank=True, null=True)),
                ("twitter", models.URLField(blank=True, null=True)),
                (
                    "google_buisness",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "unit_numbers",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(111111),
                        ]
                    ),
                ),
                ("size", models.CharField(max_length=10)),
                ("working_hours", models.CharField(max_length=200)),
                ("is_occupied", models.BooleanField(default=False)),
                (
                    "locations",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="address.location",
                    ),
                ),
                (
                    "service_types",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="providers",
                        to="service_providers.servicetypes",
                    ),
                ),
            ],
        ),
    ]
